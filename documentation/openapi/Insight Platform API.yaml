openapi: 3.0.3
info:
  title: Insight Platform Required API
  description: Every insight platform that wants to be compatible with the Snickerdoodle Protocol (SDP) and the Snickerdoodle Core (SDC) must implement this API. All API paths will be appended to an undefined base URL, such as https://insight.example.com/v0/snickerdoodle, by the SDC
  termsOfService: https://snickerdoodlelabs.io/terms/
  contact:
    name: API Support
    url: https://snickerdoodlelabs.io/support
    email: support@snickerdoodlelabs.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '2.0'
servers:
  - url: https://development.snickerdoodlelabs.io/v1
    description: Development server
  - url: https://staging.snickerdoodlelabs.io/v1
    description: Staging server
  - url: https://api.snickerdoodlelabs.io/v1
    description: Production server
    
paths:
  /insights:
    post:
      tags:
        - responses
      description: Respond to an SDQL query
      requestBody:
        description: The actual response to a query
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consentContractId:
                  type: string
                  format: ethereum-contract-address
                queryCID:
                  type: string
                  format: IPFS-CID
                insights:
                  $ref: '#/components/schemas/Insights'
                rewardParameters:
                  $ref: '#/components/schemas/RewardParameters'
                signalNullifier:
                  type: string
                  format: big-number-string
                anonymitySetStart:
                  type: integer
                anonymitySetSize:
                  type: integer
                proof:
                  type: string
                  format: ZKProof
              required:
                - consentContractId
                - queryCID
                - insights
                - rewardParameters
                - signalNullifier
                - anonymitySetStart
                - anonymitySetSize
                - signature
      responses:
        200:
          description: Returns a list of EarnedRewards objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  rewards:
                    description: The actual earned rewards (compensations) for participating in the query. 
                    type: array
                    items:
                      $ref: '#/components/schemas/EarnedReward'
        400:
          $ref: '#/components/responses/InvalidError'
  
  /optin:
    post:
      tags:
        - optins
      description: Sends a request to opt in to a particular consent contract
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consentContractId:
                  type: string
                  format: ethereum-contract-address
                commitment:
                  type: string
                  format: big-number-string
                proof:
                  type: string
                  format: ZKProof
                proofs:
                  type: array
                  items:
                    $ref: '#/components/schemas/OptinProof'
                nonce:
                  description: Required for optins to a private consent contract
                  type: string
                signature:
                  type: string
              required:
                - consentContractId
                - commitment
                - proof
      responses:
        200:
          description: Returns 200 if the optin was accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    description: Should always be true
                    type: boolean
        400:
          $ref: '#/components/responses/InvalidError'
        401:
          $ref: '#/components/responses/SpecificUnsupportedError'
        403:
          $ref: '#/components/responses/UnsupportedError'
          
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  responses:
    InvalidError:
      description: Data is invalid
    SpecificUnsupportedError:
      description: This method is not supported for this particular data wallet, consent contract, or combination of both. For example, when the insight platform is performing lazy transactions, not all consent contracts may support it.
    UnsupportedError:
      description: This method is unsupported by the insight platform. The SDC will need to use an alternate method.
      
  schemas:
    ERewardType:
      type: string
      enum: 
        - Direct
        - Lazy
        - Web2
        
    ECredentialType:
      type: string
      enum: 
        - UsernamePassword
        - OAuthBearerToken
        - RedemptionCode
        - None
      
    EarnedReward:
      type: object
      properties:
        type: 
          $ref: '#/components/schemas/ERewardType'
        transactionReceipt:
          description: The transaction receipt of the reward. May be null if not used by the type
          type: string
          format: hex-string
          nullable: true
        contractAddress:
          description: The address of the contract that the reward was executed on.
          type: string
          format: ethereum-contract-address
          nullable: true
        chainId:
          description: The chain ID that the reward was either executed on or needs to be executed on. Non-EVM chains will have a negative 
          type: number
          nullable: true
        functionName:
          type: string
          nullable: true
        functionParams:
          type: array
          items: 
            description: Value of the parameter
            type: string
          nullable: true
        eoa:
          description: The EOA that the reward was given to (for Direct rewards) or that is allowed to claim the reward (for Lazy rewards)
          type: string
          format: chain-account-address
          nullable: true
        url:
          description: For Web2 based rewards, this is the redemption URL. The user should go to this URL to receive their reward.
          type: string
          format: url
          nullable: true
        credentialType:
          allOf:
            - description: For Web2 based rewards, this is the type of credential that has been provided in order to claim the reward. It can be a username and password, an OAuth Bearer token, or a simple redemption code. The credential may also be baked into the url, and this field would be None
            - $ref: '#/components/schemas/ECredentialType'
            - nullable: true
        credential:
          description: The actual provided credential for a Web2 reward
          type: string
          nullable: true
        instructions:
          description: An optional text field to describe how to redeem the reward
          type: string
          nullable: true
      required:
        - type

    OptinProof:
      type: object
      properties:
        type:
          type: string
          enum:
            - reserves
        proof:
          type: string
          format: ZKProof
      required:
        - type
        - proof
        
    RewardParameters:
      type: array
      items:
        type: string
        description: stringified version of IDynamicRewardParameter
        example: “{\“recipientAddress\“:{\“type\“:\“address\“,\“value\“:\“0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\“}}”
        
    Insights:
      description: Each query in the 'queries' block is filtered through data permissions and get evaluated if they contain a condition. Each logic return expression (if any) get evaluated respecting the queries filtered by user permission. This object contains answers of 'queries' and 'return expressions' (if any) as key-value pairs.
      type: object
      properties:
        queries: 
          description: Contains answered queries (among all in an sdql file) as a key-value pair, keys being query ids, like q1.
          type: object
        returns:
          description: Contains results of return expressions in logic returns array (if any), keys being the return expression itself, like if$q1then$r1.
          type: object
