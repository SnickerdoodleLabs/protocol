openapi: 3.0.3
info:
  title: Insight Platform Required API
  description: Every insight platform that wants to be compatible with the Snickerdoodle Protocol (SDP) and the Snickerdoodle Core (SDC) must implement this API. All API paths will be appended to an undefined base URL, such as https://insight.example.com/v0/snickerdoodle, by the SDC
  termsOfService: https://snickerdoodlelabs.io/terms/
  contact:
    name: API Support
    url: https://snickerdoodlelabs.io/support
    email: support@snickerdoodlelabs.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: '0.1'
servers:
  - url: https://development.snickerdoodlelabs.io/v1
    description: Development server
  - url: https://staging.snickerdoodlelabs.io/v1
    description: Staging server
  - url: https://api.snickerdoodlelabs.io/v1
    description: Production server
    
paths:
  /responses:
    post:
      tags:
        - responses
      description: Responses to the subqueries with the business, data wallet, query and signiture metadata
      requestBody:
        description: The actual response to a query
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consentContractId:
                  type: string
                  format: ethereum-contract-address
                tokenId:
                  type: string
                  format: big-number-string
                queryCID:
                  type: string
                  format: IPFS-CID
                returns:
                  $ref: '#/components/schemas/Insights'
                rewardParameters:
                  $ref: '#/components/schemas/RewardParameters'
                signature:
                  type: string
                  format: hex-string
              required:
                - consentContractId
                - queryCID
                - tokenId
                - returns
                - signature
      responses:
        200:
          description: Returns a list of EarnedRewards objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  rewards:
                    description: The actual earned rewards (compensations) for participating in the query. 
                    type: array
                    items:
                      $ref: '#/components/schemas/EarnedReward'
        400:
          $ref: '#/components/responses/InvalidError'
  
  /responses/preview:
    post:
      tags:
        - responses
      description: Returns the list of earned rewards, based on the proposed list of queries. This does not change state.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                consentContractId:
                  type: string
                  format: ethereum-contract-address
                queryCID:
                  type: string
                  format: IPFS-CID
                tokenId:
                  type: string
                  format: big-number-string
                queries:
                  description: The list of queries that will be answered (q1, q3, q4) etc, based on the data permissions.
                  type: array
                  items:
                    type: string
                signature:
                  type: string
                  format: hex-string
              required:
                - consentContractId
                - queryCID
                - dataWallet
                - queries
                - signature
      responses:
        200:
          description: Returns a list of compensations that will be earned
          content:
            application/json:
              schema:
                type: object
                properties:
                  compensations:
                    description: The list of compensations that will be earned (c1, c2, c3, etc). If there are limited quantities of a particular reward, it will not be included if it is used up.
                    type: array
                    items:
                      type: string
        400:
          $ref: '#/components/responses/InvalidError'
      
  /metatransaction:
    post:
      tags:
        - metatransaction
      description: Executes a metatransaction for a data wallet. 
      requestBody:
        description: Data required to verify the request to leave the campaign
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountAddress:
                  type: string
                  format: ethereum-account-address
                contractAddress:
                  type: string
                  format: ethereum-contract-address
                nonce:
                  type: string
                  format: big-number-string
                value:
                  type: string
                  format: big-number-string
                gas:
                  type: string
                  format: big-number-string
                data:
                  description: The hex-encoded string of the transaction data.
                  type: string
                  format: hex-string
                metatransactionSignature:
                  description: The signature for the metatransaction data. It must be a Minimal Forwarder request, and signed by the executing account address. That is often the data wallet key, but could be an EOA in some cases.
                  type: string
                  format: hex-string
                requestSignature:
                  description: This is a signature for the actual API call. You must sign all properties in the post body except for signature. This is used to validate that the metatransaction request is actually coming from the data wallet. An invalid metatransaction would also fail, but this is a second level.
                  type: string
                  format: hex-string
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
        400:
          $ref: '#/components/responses/InvalidError'
        401:
          $ref: '#/components/responses/SpecificUnsupportedError'
        403:
          $ref: '#/components/responses/UnsupportedError'
          
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  responses:
    InvalidError:
      description: Data is invalid
    SpecificUnsupportedError:
      description: This method is not supported for this particular data wallet, consent contract, or combination of both. For example, when the insight platform is performing lazy transactions, not all consent contracts may support it.
    UnsupportedError:
      description: This method is unsupported by the insight platform. The SDC will need to use an alternate method.
      
  schemas:
    ERewardType:
      type: string
      enum: 
        - Direct
        - Lazy
        - Web2
        
    ECredentialType:
      type: string
      enum: 
        - UsernamePassword
        - OAuthBearerToken
        - RedemptionCode
        - None
      
    EarnedReward:
      type: object
      properties:
        type: 
          $ref: '#/components/schemas/ERewardType'
        transactionReceipt:
          description: The transaction receipt of the reward. May be null if not used by the type
          type: string
          format: hex-string
          nullable: true
        contractAddress:
          description: The address of the contract that the reward was executed on.
          type: string
          format: ethereum-contract-address
          nullable: true
        chainId:
          description: The chain ID that the reward was either executed on or needs to be executed on. Non-EVM chains will have a negative 
          type: number
          nullable: true
        functionName:
          type: string
          nullable: true
        functionParams:
          type: array
          items: 
            description: Value of the parameter
            type: string
          nullable: true
        eoa:
          description: The EOA that the reward was given to (for Direct rewards) or that is allowed to claim the reward (for Lazy rewards)
          type: string
          format: chain-account-address
          nullable: true
        url:
          description: For Web2 based rewards, this is the redemption URL. The user should go to this URL to receive their reward.
          type: string
          format: url
          nullable: true
        credentialType:
          allOf:
            - description: For Web2 based rewards, this is the type of credential that has been provided in order to claim the reward. It can be a username and password, an OAuth Bearer token, or a simple redemption code. The credential may also be baked into the url, and this field would be None
            - $ref: '#/components/schemas/ECredentialType'
            - nullable: true
        credential:
          description: The actual provided credential for a Web2 reward
          type: string
          nullable: true
        instructions:
          description: An optional text field to describe how to redeem the reward
          type: string
          nullable: true
      required:
        - type

    SubqueryReturn:
      type: object
      properties:
        subquery:
          type: string
        data:
          type: array
          items:
            type: number
            format: double
      required:
        - subquery
        - data
        
    RewardParameters:
      type: array
      items:
        type: string
        description: stringified version of IDynamicRewardParameter
        example: “{\“recipientAddress\“:{\“type\“:\“address\“,\“value\“:\“0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\“}}”
        
    Insights:
      description: Each query in the 'queries' block is filtered through data permissions and get evaluated if they contain a condition. Each logic return expression (if any) get evaluated respecting the queries filtered by user permission. This object contains answers of 'queries' and 'return expressions' (if any) as key-value pairs.
      type: object
      properties:
        queries: 
          description: Contains answered queries (among all in an sdql file) as a key-value pair, keys being query ids, like q1.
          type: object
        returns:
          description: Contains results of return expressions in logic returns array (if any), keys being the return expression itself, like if$q1then$r1.
          type: object
