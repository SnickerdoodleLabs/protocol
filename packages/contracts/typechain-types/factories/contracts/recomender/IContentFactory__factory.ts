/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IContentFactory,
  IContentFactoryInterface,
} from "../../../contracts/recomender/IContentFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldOccupant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOccupant",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
    ],
    name: "RankingUpdate",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_slot",
        type: "uint256",
      },
    ],
    name: "computeFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getGovernanceToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_startingSlot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSlots",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "filterActive",
        type: "bool",
      },
    ],
    name: "getListingsBackward",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "previous",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contentObject",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeExpiring",
            type: "uint256",
          },
        ],
        internalType: "struct IContentFactory.Listing[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_startingSlot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numSlots",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "filterActive",
        type: "bool",
      },
    ],
    name: "getListingsForward",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "previous",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contentObject",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stake",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timeExpiring",
            type: "uint256",
          },
        ],
        internalType: "struct IContentFactory.Listing[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
    ],
    name: "getTagTotal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_newHead",
        type: "uint256",
      },
    ],
    name: "initializeTag",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_existingSlot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_newSlot",
        type: "uint256",
      },
    ],
    name: "insertDownstream",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_newSlot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_existingSlot",
        type: "uint256",
      },
    ],
    name: "insertUpstream",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "isStakingToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listingDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTagsPerListing",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "_slots",
        type: "uint256[]",
      },
    ],
    name: "removeExpiredListings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_removedSlot",
        type: "uint256",
      },
    ],
    name: "removeListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "tag",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_slot",
        type: "uint256",
      },
    ],
    name: "replaceExpiredListing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IContentFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IContentFactoryInterface {
    return new Interface(_abi) as IContentFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IContentFactory {
    return new Contract(address, _abi, runner) as unknown as IContentFactory;
  }
}
