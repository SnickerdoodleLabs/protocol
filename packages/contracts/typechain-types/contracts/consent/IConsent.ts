/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IContentObject {
  export type TagStruct = { tag: string; slot: BigNumberish };

  export type TagStructOutput = [tag: string, slot: bigint] & {
    tag: string;
    slot: bigint;
  };
}

export interface IConsentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDomain"
      | "baseURI"
      | "batchOptIn"
      | "checkCommitments"
      | "checkDomain"
      | "checkNonces"
      | "depositStake"
      | "disableOpenOptIn"
      | "enableOpenOptIn"
      | "fetchAnonymitySet"
      | "getContentAddress"
      | "getNumberOfStakedTags"
      | "getTagArray"
      | "moveExistingListingUpstream"
      | "newGlobalTag"
      | "newLocalTagDownstream"
      | "newLocalTagUpstream"
      | "openOptInDisabled"
      | "optIn"
      | "pause"
      | "queryHorizon"
      | "removeDomain"
      | "removeListing"
      | "removeStake"
      | "replaceExpiredListing"
      | "requestForData"
      | "restakeExpiredListing"
      | "restrictedOptIn"
      | "setBaseURI"
      | "setQueryHorizon"
      | "tagIndices"
      | "totalSupply"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddDomain"
      | "Commitment"
      | "Deposit"
      | "RemoveDomain"
      | "RequestForData"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addDomain", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchOptIn",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCommitments",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "checkDomain", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkNonces",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableOpenOptIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableOpenOptIn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAnonymitySet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfStakedTags",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTagArray",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "moveExistingListingUpstream",
    values: [string, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newGlobalTag",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newLocalTagDownstream",
    values: [string, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newLocalTagUpstream",
    values: [string, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openOptInDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "optIn", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryHorizon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceExpiredListing",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestForData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "restakeExpiredListing",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedOptIn",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setQueryHorizon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tagIndices",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchOptIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableOpenOptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOpenOptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAnonymitySet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfStakedTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTagArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveExistingListingUpstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newGlobalTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newLocalTagDownstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newLocalTagUpstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openOptInDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "optIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryHorizon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceExpiredListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestForData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restakeExpiredListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedOptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQueryHorizon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tagIndices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AddDomainEvent {
  export type InputTuple = [domain: string];
  export type OutputTuple = [domain: string];
  export interface OutputObject {
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitmentEvent {
  export type InputTuple = [index: BigNumberish, commitment: BytesLike];
  export type OutputTuple = [index: bigint, commitment: string];
  export interface OutputObject {
    index: bigint;
    commitment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    depositor: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [depositor: string, asset: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveDomainEvent {
  export type InputTuple = [domain: string];
  export type OutputTuple = [domain: string];
  export interface OutputObject {
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestForDataEvent {
  export type InputTuple = [
    requester: AddressLike,
    ipfsCIDIndexed: string,
    ipfsCID: string
  ];
  export type OutputTuple = [
    requester: string,
    ipfsCIDIndexed: string,
    ipfsCID: string
  ];
  export interface OutputObject {
    requester: string;
    ipfsCIDIndexed: string;
    ipfsCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    depositor: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [depositor: string, asset: string, amount: bigint];
  export interface OutputObject {
    depositor: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConsent extends BaseContract {
  connect(runner?: ContractRunner | null): IConsent;
  waitForDeployment(): Promise<this>;

  interface: IConsentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDomain: TypedContractMethod<[domain: string], [void], "nonpayable">;

  baseURI: TypedContractMethod<[], [string], "view">;

  batchOptIn: TypedContractMethod<
    [commitmentBatch: BytesLike[]],
    [void],
    "nonpayable"
  >;

  checkCommitments: TypedContractMethod<
    [commitmentArray: BytesLike[]],
    [bigint[]],
    "view"
  >;

  checkDomain: TypedContractMethod<[domain: string], [boolean], "view">;

  checkNonces: TypedContractMethod<
    [nonce: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  depositStake: TypedContractMethod<
    [depositToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  disableOpenOptIn: TypedContractMethod<[], [void], "nonpayable">;

  enableOpenOptIn: TypedContractMethod<[], [void], "nonpayable">;

  fetchAnonymitySet: TypedContractMethod<
    [start: BigNumberish, stop: BigNumberish],
    [string[]],
    "view"
  >;

  getContentAddress: TypedContractMethod<[], [string], "view">;

  getNumberOfStakedTags: TypedContractMethod<
    [stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  getTagArray: TypedContractMethod<
    [stakingToken: AddressLike],
    [IContentObject.TagStructOutput[]],
    "view"
  >;

  moveExistingListingUpstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  newGlobalTag: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  newLocalTagDownstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _existingSlot: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  newLocalTagUpstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  openOptInDisabled: TypedContractMethod<[], [boolean], "view">;

  optIn: TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  queryHorizon: TypedContractMethod<[], [bigint], "view">;

  removeDomain: TypedContractMethod<[domain: string], [void], "nonpayable">;

  removeListing: TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [string],
    "nonpayable"
  >;

  removeStake: TypedContractMethod<
    [depositToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  replaceExpiredListing: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _slot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  requestForData: TypedContractMethod<[ipfsCID: string], [void], "nonpayable">;

  restakeExpiredListing: TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  restrictedOptIn: TypedContractMethod<
    [tokenId: BigNumberish, commitment: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  setBaseURI: TypedContractMethod<[newURI: string], [void], "nonpayable">;

  setQueryHorizon: TypedContractMethod<
    [queryHorizon_: BigNumberish],
    [void],
    "nonpayable"
  >;

  tagIndices: TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDomain"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "baseURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "batchOptIn"
  ): TypedContractMethod<[commitmentBatch: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkCommitments"
  ): TypedContractMethod<[commitmentArray: BytesLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "checkDomain"
  ): TypedContractMethod<[domain: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkNonces"
  ): TypedContractMethod<[nonce: BigNumberish[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "depositStake"
  ): TypedContractMethod<
    [depositToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disableOpenOptIn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableOpenOptIn"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fetchAnonymitySet"
  ): TypedContractMethod<
    [start: BigNumberish, stop: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfStakedTags"
  ): TypedContractMethod<[stakingToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTagArray"
  ): TypedContractMethod<
    [stakingToken: AddressLike],
    [IContentObject.TagStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "moveExistingListingUpstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newGlobalTag"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newLocalTagDownstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _existingSlot: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newLocalTagUpstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openOptInDisabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "optIn"
  ): TypedContractMethod<[commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "queryHorizon"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeDomain"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeListing"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStake"
  ): TypedContractMethod<
    [depositToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replaceExpiredListing"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      stake: BigNumberish,
      _slot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestForData"
  ): TypedContractMethod<[ipfsCID: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "restakeExpiredListing"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "restrictedOptIn"
  ): TypedContractMethod<
    [tokenId: BigNumberish, commitment: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseURI"
  ): TypedContractMethod<[newURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setQueryHorizon"
  ): TypedContractMethod<[queryHorizon_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tagIndices"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AddDomain"
  ): TypedContractEvent<
    AddDomainEvent.InputTuple,
    AddDomainEvent.OutputTuple,
    AddDomainEvent.OutputObject
  >;
  getEvent(
    key: "Commitment"
  ): TypedContractEvent<
    CommitmentEvent.InputTuple,
    CommitmentEvent.OutputTuple,
    CommitmentEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "RemoveDomain"
  ): TypedContractEvent<
    RemoveDomainEvent.InputTuple,
    RemoveDomainEvent.OutputTuple,
    RemoveDomainEvent.OutputObject
  >;
  getEvent(
    key: "RequestForData"
  ): TypedContractEvent<
    RequestForDataEvent.InputTuple,
    RequestForDataEvent.OutputTuple,
    RequestForDataEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "AddDomain(string)": TypedContractEvent<
      AddDomainEvent.InputTuple,
      AddDomainEvent.OutputTuple,
      AddDomainEvent.OutputObject
    >;
    AddDomain: TypedContractEvent<
      AddDomainEvent.InputTuple,
      AddDomainEvent.OutputTuple,
      AddDomainEvent.OutputObject
    >;

    "Commitment(uint256,bytes32)": TypedContractEvent<
      CommitmentEvent.InputTuple,
      CommitmentEvent.OutputTuple,
      CommitmentEvent.OutputObject
    >;
    Commitment: TypedContractEvent<
      CommitmentEvent.InputTuple,
      CommitmentEvent.OutputTuple,
      CommitmentEvent.OutputObject
    >;

    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "RemoveDomain(string)": TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;
    RemoveDomain: TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;

    "RequestForData(address,string,string)": TypedContractEvent<
      RequestForDataEvent.InputTuple,
      RequestForDataEvent.OutputTuple,
      RequestForDataEvent.OutputObject
    >;
    RequestForData: TypedContractEvent<
      RequestForDataEvent.InputTuple,
      RequestForDataEvent.OutputTuple,
      RequestForDataEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
