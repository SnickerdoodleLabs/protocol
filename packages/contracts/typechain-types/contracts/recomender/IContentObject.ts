/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IContentObject {
  export type TagStruct = { tag: string; slot: BigNumberish };

  export type TagStructOutput = [tag: string, slot: bigint] & {
    tag: string;
    slot: bigint;
  };
}

export interface IContentObjectInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getContentAddress"
      | "getNumberOfStakedTags"
      | "getTagArray"
      | "tagIndices"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getContentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfStakedTags",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTagArray",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tagIndices",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfStakedTags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTagArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tagIndices", data: BytesLike): Result;
}

export interface IContentObject extends BaseContract {
  connect(runner?: ContractRunner | null): IContentObject;
  waitForDeployment(): Promise<this>;

  interface: IContentObjectInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getContentAddress: TypedContractMethod<[], [string], "view">;

  getNumberOfStakedTags: TypedContractMethod<
    [stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  getTagArray: TypedContractMethod<
    [stakingToken: AddressLike],
    [IContentObject.TagStructOutput[]],
    "view"
  >;

  tagIndices: TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getContentAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNumberOfStakedTags"
  ): TypedContractMethod<[stakingToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTagArray"
  ): TypedContractMethod<
    [stakingToken: AddressLike],
    [IContentObject.TagStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "tagIndices"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  filters: {};
}
