import {
  BigNumberString,
  CircuitError,
  Commitment,
  ZKProof,
} from "@snickerdoodlelabs/objects";
import { ResultAsync } from "neverthrow";

export interface IMembershipWrapper {
  /**
   * asdf
   * @param signal a string representing the signal to be proved
   * @param identityTrapdoor A BigNumberString representing one half of the private data for an Identity
   * @param identityNullifier A BigNumberString representing the other half of the private data for an Identity
   * @param anonymitySet An array of commitments of other identities; the larger this set the more private the proof. For simplicity, this set may optionally include the commitment generated by the private trapdoor and nullifier.
   * @param roundIdentifier A string representing the epochNullifier, but is most likely to be the IPFS CID
   */
  prove(
    signal: string,
    identityTrapdoor: BigNumberString,
    identityNullifier: BigNumberString,
    anonymitySet: Commitment[],
    roundIdentifier: string,
  ): ResultAsync<ZKProof, CircuitError>;

  /**
   * Returns true if the proof is valid, false otherwise. All the public data (non-proof parameters) must match
   * what was used to generate the proof. Since this method is normally called on the server, all the values
   * must be passed along over the wire in addition to the proof, or be stored on a 3rd party such as the
   * blockchain. The anonymity set is a good candidate for this.
   * @param signal a string representing the signal to be proved
   * @param anonymitySet An array of commitments of other identities. This array must match the commitments used to generate the proof (although the order can be different). The commitments must include the commitment for the actual user as well as the decoy commitments.
   * @param roundIdentifier A string representing the epochNullifier, but is most likely to be the IPFS CID
   * @param signalNullifier A BigNumberString that is generated from the user's identityNullifier and the roundIdentifier. This must be passed along with the proof from wherever the proof is generated.
   * @param proof The ZKProof that is generated from the prove method. This proof is the ObjectUtils.serialize()'d version of the o1js Proof object.
   */
  verify(
    signal: string,
    anonymitySet: Commitment[],
    roundIdentifier: string,
    signalNullifier: BigNumberString,
    proof: ZKProof,
  ): ResultAsync<boolean, CircuitError>;
}
