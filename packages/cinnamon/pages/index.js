import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { ethers } from "ethers";
import { useState } from "react";

//https://www.youtube.com/watch?v=pdsYCkUWrgQ

export default function Home() {
  const [isConnected, setIsConnected] = useState(false);
  const [signer, setSigner] = useState(undefined);
  const [accounts, setAccounts] = useState([]);

  const [provider, setProvider] = useState();
  const [messages, setMessages] = useState([]);

  const abi = [
    {
      inputs: [
        {
          internalType: "address",
          name: "trustedForwarder",
          type: "address",
        },
      ],
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "who",
          type: "address",
        },
        {
          indexed: false,
          internalType: "string",
          name: "CID",
          type: "string",
        },
      ],
      name: "RequestForData",
      type: "event",
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "forwarder",
          type: "address",
        },
      ],
      name: "isTrustedForwarder",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool",
        },
      ],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        {
          internalType: "string",
          name: "CID",
          type: "string",
        },
      ],
      name: "requestForData",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
  ];

  async function connect() {
    if (typeof window.ethereum != undefined) {
      const accounts = await ethereum.request({ method: "eth_requestAccounts" });
      setIsConnected(true);
      const connectedProvider = new ethers.providers.Web3Provider(
        window.ethereum
      );
      setAccounts( accounts);
      setProvider(connectedProvider);

      setSigner(connectedProvider.getSigner());
      checkEvents(connectedProvider);
    } else {
      console.log(" window.ethereum eth not found");
    }
  }

  async function  signatureVerification() {

    const msgParams = {
      domain: {
        chainId: 1,
        name: 'Snickerdoodle Consent Contract',
        verifyingContract: '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
        version: '1',
      },

      message: {
        contents: 'Hello, from Snickerdoodle',
      },
    };

    const from = accounts[0]; 
    var params = [from, JSON.stringify(msgParams)];

    var message = JSON.stringify({ 'foo': 'bar'})
    const signature = await signer.signMessage(message);
    console.log( ' signature ', signature);
    // ethereum.request(
    //   {
    //     method: 'eth_signTypedData_v4',
    //     params,
    //     from,
    //   }
    // ).then(  (result) => console.log(result))
  
     
  }
  function clearEvents() {
    setMessages([]);
  }
  async function checkEvents(provider) {
    const contractAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";

    const contract = new ethers.Contract(contractAddress, abi, provider);

    contract.on("RequestForData", (e, cid) =>

    { setMessages(prev => [...prev, cid]);

      console.log("Received Evemt", " Address ", e, " CID ", cid)
    });
  }
  return (
    <>
      <Head>
        <title>Cinnamon: V2</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Welcome to Cinnamon - V2</h1>

        <p>
        This is Test Program to capture Block Chain Events. 
        Run steps from Consent Contract Tasks located at 
      https://github.com/SnickerdoodleLabs/SDL-CLI
</p>
        {isConnected ? (
          "Connected"
        ) : (
          <button
            type="button"
            className="btn btn-primary mx-4"
            onClick={() => {
              connect();
              

            }}
          >
            Connect with Metamask
          </button>
        )}

   
    <button
          type="button"
          className="btn btn-primary mx-4"
          onClick={() => {
            signatureVerification();
          }}
        >
          Signature Verification
        </button>

        <button
          type="button"
          className="btn btn-primary mx-4"
          onClick={() => {
            clearEvents();
          }}
        >
          Clear Events
        </button>
        <div> {messages.length >0 ? 'Messages Received' : ''} </div>

        <ul>  {messages.map( (message, index ) => <li key={index}>{message}</li>)}
        
        </ul>
      
          <p> Account is {accounts[0]} </p>
      </main>
      
     
    </>
  );
}
