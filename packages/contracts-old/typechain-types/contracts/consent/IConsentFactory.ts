/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IContentFactory {
  export type ListingStruct = {
    previous: BigNumberish;
    next: BigNumberish;
    contentObject: AddressLike;
    stake: BigNumberish;
    timeExpiring: BigNumberish;
  };

  export type ListingStructOutput = [
    previous: bigint,
    next: bigint,
    contentObject: string,
    stake: bigint,
    timeExpiring: bigint
  ] & {
    previous: bigint;
    next: bigint;
    contentObject: string;
    stake: bigint;
    timeExpiring: bigint;
  };
}

export interface IConsentFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminRemoveListings"
      | "blockContentObject"
      | "computeFee"
      | "createConsent"
      | "getGovernanceToken"
      | "getListingsBackward"
      | "getListingsForward"
      | "getTagTotal"
      | "initializeTag"
      | "insertDownstream"
      | "insertUpstream"
      | "isStakingToken"
      | "listingDuration"
      | "maxTagsPerListing"
      | "moveUpstream"
      | "registerStakingToken"
      | "removeExpiredListings"
      | "removeListing"
      | "replaceExpiredListing"
      | "setListingDuration"
      | "setMaxTagsPerListing"
      | "unblockContentObject"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ConsentContractDeployed" | "RankingUpdate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminRemoveListings",
    values: [string, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "blockContentObject",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "computeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createConsent",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsBackward",
    values: [string, AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsForward",
    values: [string, AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTagTotal",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTag",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertDownstream",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertUpstream",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTagsPerListing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveUpstream",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStakingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExpiredListings",
    values: [string, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceExpiredListing",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTagsPerListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockContentObject",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminRemoveListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockContentObject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "computeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingsBackward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingsForward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTagTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertDownstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertUpstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTagsPerListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveUpstream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExpiredListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceExpiredListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTagsPerListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockContentObject",
    data: BytesLike
  ): Result;
}

export namespace ConsentContractDeployedEvent {
  export type InputTuple = [owner: AddressLike, consentAddress: AddressLike];
  export type OutputTuple = [owner: string, consentAddress: string];
  export interface OutputObject {
    owner: string;
    consentAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RankingUpdateEvent {
  export type InputTuple = [
    oldOccupant: AddressLike,
    newOccupant: AddressLike,
    stakingToken: AddressLike,
    tag: string,
    slot: BigNumberish
  ];
  export type OutputTuple = [
    oldOccupant: string,
    newOccupant: string,
    stakingToken: string,
    tag: string,
    slot: bigint
  ];
  export interface OutputObject {
    oldOccupant: string;
    newOccupant: string;
    stakingToken: string;
    tag: string;
    slot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IConsentFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IConsentFactory;
  waitForDeployment(): Promise<this>;

  interface: IConsentFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminRemoveListings: TypedContractMethod<
    [tag: string, stakingToken: AddressLike, removedSlots: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  blockContentObject: TypedContractMethod<
    [stakingToken: AddressLike, contentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  computeFee: TypedContractMethod<[_slot: BigNumberish], [bigint], "view">;

  createConsent: TypedContractMethod<
    [owner: AddressLike, baseURI: string],
    [void],
    "nonpayable"
  >;

  getGovernanceToken: TypedContractMethod<[], [string], "view">;

  getListingsBackward: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _startingSlot: BigNumberish,
      numSlots: BigNumberish,
      filterActive: boolean
    ],
    [[string[], IContentFactory.ListingStructOutput[]]],
    "view"
  >;

  getListingsForward: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _startingSlot: BigNumberish,
      numSlots: BigNumberish,
      filterActive: boolean
    ],
    [[string[], IContentFactory.ListingStructOutput[]]],
    "view"
  >;

  getTagTotal: TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;

  initializeTag: TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _newHead: BigNumberish],
    [void],
    "nonpayable"
  >;

  insertDownstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _existingSlot: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  insertUpstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isStakingToken: TypedContractMethod<
    [tokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  listingDuration: TypedContractMethod<[], [bigint], "view">;

  maxTagsPerListing: TypedContractMethod<[], [bigint], "view">;

  moveUpstream: TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerStakingToken: TypedContractMethod<
    [stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  removeExpiredListings: TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  removeListing: TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _removedSlot: BigNumberish],
    [void],
    "nonpayable"
  >;

  replaceExpiredListing: TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _slot: BigNumberish],
    [void],
    "nonpayable"
  >;

  setListingDuration: TypedContractMethod<
    [listingDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTagsPerListing: TypedContractMethod<
    [maxTagsPerListing: BigNumberish],
    [void],
    "nonpayable"
  >;

  unblockContentObject: TypedContractMethod<
    [stakingToken: AddressLike, contentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminRemoveListings"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike, removedSlots: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "blockContentObject"
  ): TypedContractMethod<
    [stakingToken: AddressLike, contentAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computeFee"
  ): TypedContractMethod<[_slot: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createConsent"
  ): TypedContractMethod<
    [owner: AddressLike, baseURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGovernanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getListingsBackward"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _startingSlot: BigNumberish,
      numSlots: BigNumberish,
      filterActive: boolean
    ],
    [[string[], IContentFactory.ListingStructOutput[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getListingsForward"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _startingSlot: BigNumberish,
      numSlots: BigNumberish,
      filterActive: boolean
    ],
    [[string[], IContentFactory.ListingStructOutput[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTagTotal"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeTag"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _newHead: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertDownstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _existingSlot: BigNumberish,
      _newSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertUpstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isStakingToken"
  ): TypedContractMethod<[tokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "listingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTagsPerListing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "moveUpstream"
  ): TypedContractMethod<
    [
      tag: string,
      stakingToken: AddressLike,
      _newSlot: BigNumberish,
      _existingSlot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerStakingToken"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeExpiredListings"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _slots: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeListing"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _removedSlot: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replaceExpiredListing"
  ): TypedContractMethod<
    [tag: string, stakingToken: AddressLike, _slot: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setListingDuration"
  ): TypedContractMethod<[listingDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxTagsPerListing"
  ): TypedContractMethod<
    [maxTagsPerListing: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unblockContentObject"
  ): TypedContractMethod<
    [stakingToken: AddressLike, contentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConsentContractDeployed"
  ): TypedContractEvent<
    ConsentContractDeployedEvent.InputTuple,
    ConsentContractDeployedEvent.OutputTuple,
    ConsentContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "RankingUpdate"
  ): TypedContractEvent<
    RankingUpdateEvent.InputTuple,
    RankingUpdateEvent.OutputTuple,
    RankingUpdateEvent.OutputObject
  >;

  filters: {
    "ConsentContractDeployed(address,address)": TypedContractEvent<
      ConsentContractDeployedEvent.InputTuple,
      ConsentContractDeployedEvent.OutputTuple,
      ConsentContractDeployedEvent.OutputObject
    >;
    ConsentContractDeployed: TypedContractEvent<
      ConsentContractDeployedEvent.InputTuple,
      ConsentContractDeployedEvent.OutputTuple,
      ConsentContractDeployedEvent.OutputObject
    >;

    "RankingUpdate(address,address,address,string,uint256)": TypedContractEvent<
      RankingUpdateEvent.InputTuple,
      RankingUpdateEvent.OutputTuple,
      RankingUpdateEvent.OutputObject
    >;
    RankingUpdate: TypedContractEvent<
      RankingUpdateEvent.InputTuple,
      RankingUpdateEvent.OutputTuple,
      RankingUpdateEvent.OutputObject
    >;
  };
}
